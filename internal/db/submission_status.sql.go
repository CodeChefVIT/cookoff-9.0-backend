// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: submission_status.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSubmissionStatus = `-- name: CreateSubmissionStatus :exec
INSERT INTO submission_results (id, submission_id, testcase_id ,status ,runtime, memory, description)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateSubmissionStatusParams struct {
	ID           uuid.UUID
	SubmissionID uuid.UUID
	TestcaseID   uuid.NullUUID
	Status       string
	Runtime      pgtype.Numeric
	Memory       pgtype.Numeric
	Description  *string
}

func (q *Queries) CreateSubmissionStatus(ctx context.Context, arg CreateSubmissionStatusParams) error {
	_, err := q.db.Exec(ctx, createSubmissionStatus,
		arg.ID,
		arg.SubmissionID,
		arg.TestcaseID,
		arg.Status,
		arg.Runtime,
		arg.Memory,
		arg.Description,
	)
	return err
}

const getStatsForFinalSubEntry = `-- name: GetStatsForFinalSubEntry :many
SELECT 
    runtime, 
    memory,   
    status
FROM submission_results
WHERE submission_id = $1
`

type GetStatsForFinalSubEntryRow struct {
	Runtime pgtype.Numeric
	Memory  pgtype.Numeric
	Status  string
}

func (q *Queries) GetStatsForFinalSubEntry(ctx context.Context, submissionID uuid.UUID) ([]GetStatsForFinalSubEntryRow, error) {
	rows, err := q.db.Query(ctx, getStatsForFinalSubEntry, submissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStatsForFinalSubEntryRow
	for rows.Next() {
		var i GetStatsForFinalSubEntryRow
		if err := rows.Scan(&i.Runtime, &i.Memory, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
