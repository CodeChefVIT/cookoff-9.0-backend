// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, reg_no, password, role, round_qualified, score, name
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.RegNo,
		&i.Password,
		&i.Role,
		&i.RoundQualified,
		&i.Score,
		&i.Name,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, reg_no, password, role, round_qualified, score, name
FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.RegNo,
		&i.Password,
		&i.Role,
		&i.RoundQualified,
		&i.Score,
		&i.Name,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, reg_no, password, role, round_qualified, score, name
FROM users
WHERE name = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.RegNo,
		&i.Password,
		&i.Role,
		&i.RoundQualified,
		&i.Score,
		&i.Name,
	)
	return i, err
}
